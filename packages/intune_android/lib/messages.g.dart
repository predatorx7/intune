// Autogenerated from Pigeon (v10.1.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

enum MSALLoginPrompt {
  consent,
  create,
  login,
  selectAccount,
  whenRequired,
}

class SignInParams {
  SignInParams({
    required this.scopes,
    this.correlationId,
    this.authority,
    this.loginHint,
    this.prompt,
    this.extraScopesToConsent,
  });

  List<String?> scopes;

  String? correlationId;

  String? authority;

  String? loginHint;

  MSALLoginPrompt? prompt;

  List<String?>? extraScopesToConsent;

  Object encode() {
    return <Object?>[
      scopes,
      correlationId,
      authority,
      loginHint,
      prompt?.index,
      extraScopesToConsent,
    ];
  }

  static SignInParams decode(Object result) {
    result as List<Object?>;
    return SignInParams(
      scopes: (result[0] as List<Object?>?)!.cast<String?>(),
      correlationId: result[1] as String?,
      authority: result[2] as String?,
      loginHint: result[3] as String?,
      prompt: result[4] != null
          ? MSALLoginPrompt.values[result[4]! as int]
          : null,
      extraScopesToConsent: (result[5] as List<Object?>?)?.cast<String?>(),
    );
  }
}

class MSALApiException {
  MSALApiException({
    required this.errorCode,
    this.message,
    required this.stackTraceAsString,
  });

  String errorCode;

  String? message;

  String stackTraceAsString;

  Object encode() {
    return <Object?>[
      errorCode,
      message,
      stackTraceAsString,
    ];
  }

  static MSALApiException decode(Object result) {
    result as List<Object?>;
    return MSALApiException(
      errorCode: result[0]! as String,
      message: result[1] as String?,
      stackTraceAsString: result[2]! as String,
    );
  }
}

class _IntuneApiCodec extends StandardMessageCodec {
  const _IntuneApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is MSALApiException) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is SignInParams) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return MSALApiException.decode(readValue(buffer)!);
      case 129: 
        return SignInParams.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class IntuneApi {
  /// Constructor for [IntuneApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  IntuneApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _IntuneApiCodec();

  Future<bool> registerAuthentication() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.IntuneApi.registerAuthentication', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as bool?)!;
    }
  }

  Future<bool> registerAccountForMAM(String arg_upn, String arg_aadId, String arg_tenantId, String arg_authorityURL) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.IntuneApi.registerAccountForMAM', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_upn, arg_aadId, arg_tenantId, arg_authorityURL]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as bool?)!;
    }
  }

  Future<bool> unregisterAccountFromMAM(String arg_upn, String arg_aadId) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.IntuneApi.unregisterAccountFromMAM', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_upn, arg_aadId]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as bool?)!;
    }
  }

  Future<bool> createMicrosoftPublicClientApplication(Map<String?, Object?> arg_publicClientApplicationConfiguration, bool arg_enableLogs) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.IntuneApi.createMicrosoftPublicClientApplication', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_publicClientApplicationConfiguration, arg_enableLogs]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as bool?)!;
    }
  }

  Future<bool> signIn(SignInParams arg_params) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.IntuneApi.signIn', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_params]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as bool?)!;
    }
  }
}

class _IntuneFlutterApiCodec extends StandardMessageCodec {
  const _IntuneFlutterApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is MSALApiException) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return MSALApiException.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

abstract class IntuneFlutterApi {
  static const MessageCodec<Object?> codec = _IntuneFlutterApiCodec();

  Future<String?> acquireTokenSilent(String upn, String aadId, List<String?> scopes);

  void onEnrollmentNotification(String enrollmentResult);

  void onUnexpectedEnrollmentNotification();

  void onMsalException(MSALApiException exception);

  static void setup(IntuneFlutterApi? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.IntuneFlutterApi.acquireTokenSilent', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.IntuneFlutterApi.acquireTokenSilent was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_upn = (args[0] as String?);
          assert(arg_upn != null,
              'Argument for dev.flutter.pigeon.IntuneFlutterApi.acquireTokenSilent was null, expected non-null String.');
          final String? arg_aadId = (args[1] as String?);
          assert(arg_aadId != null,
              'Argument for dev.flutter.pigeon.IntuneFlutterApi.acquireTokenSilent was null, expected non-null String.');
          final List<String?>? arg_scopes = (args[2] as List<Object?>?)?.cast<String?>();
          assert(arg_scopes != null,
              'Argument for dev.flutter.pigeon.IntuneFlutterApi.acquireTokenSilent was null, expected non-null List<String?>.');
          final String? output = await api.acquireTokenSilent(arg_upn!, arg_aadId!, arg_scopes!);
          return output;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.IntuneFlutterApi.onEnrollmentNotification', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.IntuneFlutterApi.onEnrollmentNotification was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_enrollmentResult = (args[0] as String?);
          assert(arg_enrollmentResult != null,
              'Argument for dev.flutter.pigeon.IntuneFlutterApi.onEnrollmentNotification was null, expected non-null String.');
          api.onEnrollmentNotification(arg_enrollmentResult!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.IntuneFlutterApi.onUnexpectedEnrollmentNotification', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          // ignore message
          api.onUnexpectedEnrollmentNotification();
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.IntuneFlutterApi.onMsalException', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.IntuneFlutterApi.onMsalException was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final MSALApiException? arg_exception = (args[0] as MSALApiException?);
          assert(arg_exception != null,
              'Argument for dev.flutter.pigeon.IntuneFlutterApi.onMsalException was null, expected non-null MSALApiException.');
          api.onMsalException(arg_exception!);
          return;
        });
      }
    }
  }
}
